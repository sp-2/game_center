{"ast":null,"code":"import _classCallCheck from \"/Users/sp/Desktop/sw/react/tickingclock/game_center/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sp/Desktop/sw/react/tickingclock/game_center/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sp/Desktop/sw/react/tickingclock/game_center/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sp/Desktop/sw/react/tickingclock/game_center/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sp/Desktop/sw/react/tickingclock/game_center/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sp/Desktop/sw/react/tickingclock/game_center/src/SudokuPuzzleSolver.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    style: {\n      backgroundColor: \"grey\",\n      color: \"white\",\n      height: \"50px\",\n      width: \"50px\"\n    },\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, props.value);\n}\n\nfunction SquareB(props) {\n  return React.createElement(\"button\", {\n    style: props.style,\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, props.value);\n}\n\nfunction SquareF(props) {\n  return React.createElement(\"input\", {\n    size: \"2\",\n    maxLength: \"1\",\n    readOnly: props.readOnlyVal,\n    type: \"text\",\n    placeholder: \"\",\n    style: props.styleSettings,\n    key: props.keyValue,\n    defaultValue: props.defaultValue,\n    onChange: props.onChange,\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  });\n}\n\nvar Board =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Board, _React$Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n\n    _this.checkCell = function (r, c, numbers, squares) {\n      var rowStart = _this.getStartIndex(r);\n\n      var colStart = _this.getStartIndex(c);\n\n      for (var row = rowStart; row <= rowStart + 2; row++) {\n        for (var col = colStart; col <= colStart + 2; col++) {\n          if (!(row == r && col == c)) {\n            if (squares[row][col].value != undefined) {\n              if (numbers.indexOf(squares[row][col].value) != -1) {\n                numbers.splice(numbers.indexOf(squares[row][col].value), 1);\n              }\n            }\n          }\n        }\n      }\n\n      return numbers;\n    };\n\n    _this.checkRow = function (r, c, numbers, squares) {\n      for (var i = 0; i < 9; i++) {\n        if (i != c) {\n          if (squares[r][i].value != undefined) {\n            if (numbers.indexOf(squares[r][i].value) != -1) {\n              numbers.splice(numbers.indexOf(squares[r][i].value), 1);\n            }\n          }\n        }\n      }\n\n      return numbers;\n    };\n\n    _this.checkCol = function (r, c, numbers, squares) {\n      for (var i = 0; i < 9; i++) {\n        if (i != r) {\n          if (squares[i][c].value != undefined) {\n            if (numbers.indexOf(squares[i][c].value) != -1) {\n              numbers.splice(numbers.indexOf(squares[i][c].value), 1);\n            }\n          }\n        }\n      }\n\n      return numbers;\n    };\n\n    _this.valChangeHandler = function (i, j, event) {\n      var board = _this.deepCopy(_this.state.board);\n\n      if (event.target.value) {\n        board[i][j].value = Number(event.target.value);\n        board[i][j].given = true;\n        console.log(board[i][j].value, i, j);\n        console.log(board[i][j].given, i, j); //this.setState({board: board});\n\n        _this.setState({\n          board: board\n        }, function () {\n          console.log('in val b', this.state.board);\n          console.log('in val pu', this.state.puzzle);\n        });\n      } else {\n        board[i][j].value = undefined;\n        board[i][j].given = false; //check logic\n\n        _this.setState({\n          board: board\n        }, function () {\n          console.log('in val b', this.state.board);\n          console.log('in val pu', this.state.puzzle);\n        });\n\n        console.log(board[i][j].value, i, j);\n        console.log(board[i][j].given, i, j);\n      }\n    };\n\n    _this.state = {\n      cellValues: Array(9).fill(false).map(function () {\n        return new Array(9).fill(false);\n      }),\n      squares: Array(9).fill().map(function () {\n        return new Array(9).fill({\n          value: undefined,\n          pencilMark: [],\n          visited: []\n        });\n      }),\n      solution: Array(9).fill().map(function () {\n        return new Array(9).fill({\n          value: undefined,\n          pencilMark: [],\n          visited: []\n        });\n      }),\n      puzzle: Array(9).fill().map(function () {\n        return new Array(9).fill({\n          value: undefined,\n          given: false\n        });\n      }),\n      board: Array(9).fill().map(function () {\n        return new Array(9).fill({\n          value: undefined,\n          given: false\n        });\n      }),\n      saved_board: Array(9).fill().map(function () {\n        return new Array(9).fill({\n          value: undefined,\n          given: false\n        });\n      }),\n      cellCheck: Array(9).fill(false).map(function () {\n        return new Array(9).fill(false);\n      }),\n      buttonText: \"See Solution\" // };\n      // this.valChangeHandler = this.valChangeHandler.bind(this);\n\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"onPlayAgainHandler\",\n    value: function onPlayAgainHandler() {\n      var solution = this.getSolution();\n      var puzzle = this.getUniquePuzzle(solution); //this.getSolution();\n      //this.getUniquePuzzle(this.state.solution);\n\n      var board = this.deepCopy(puzzle);\n      var saved_board = this.deepCopy(puzzle);\n      var buttonText = \"See Solution\";\n      var cellCheck = Array(9).fill(false).map(function () {\n        return new Array(9).fill(false);\n      }); //console.log('in onPlayAgainHandler before b',board);\n\n      this.setState({\n        solution: solution,\n        puzzle: puzzle,\n        board: board,\n        saved_board: saved_board,\n        buttonText: buttonText,\n        cellCheck: cellCheck\n      }, function () {\n        console.log('in onPlayAgainHandler fter b', this.state.board);\n        console.log('in onPlayAgainHandler fter s', this.state.solution);\n        console.log('in onPlayAgainHandler fter p', this.state.puzzle);\n        console.log('in onPlayAgainHandler fter sb', this.state.saved_board);\n      });\n    }\n  }, {\n    key: \"onSolveHandlerRBS\",\n    value: function onSolveHandlerRBS() {\n      //var solution = this.getSolution();\n      //var puzzle = this.getUniquePuzzle(solution);\n      //this.getSolution();\n      //this.getUniquePuzzle(this.state.solution);\n      var puzzle = this.deepCopy(this.state.board);\n      console.log('in onSolveHandler bef p', puzzle);\n      this.solveSudokuO(0, 0, puzzle); //var saved_board = this.deepCopy(puzzle);\n      //var buttonText  = \"See Solution\";\n      //var cellCheck =  Array(9).fill(false).map(() => new Array(9).fill(false));\n\n      console.log('in onSolveHandler af p', puzzle); // this.setState({solution: solution, puzzle: puzzle, board: board, saved_board: saved_board, buttonText: buttonText, cellCheck: cellCheck}, function () {\n      //   console.log('in onPlayAgainHandler fter b',this.state.board);\n      //   console.log('in onPlayAgainHandler fter s',this.state.solution);\n      //   console.log('in onPlayAgainHandler fter p',this.state.puzzle);\n      //   console.log('in onPlayAgainHandler fter sb',this.state.saved_board);\n      // });\n    }\n  }, {\n    key: \"onSolveHandlerNRBS\",\n    value: function onSolveHandlerNRBS() {\n      //var solution = this.getSolution();\n      //var puzzle = this.getUniquePuzzle(solution);\n      //this.getSolution();\n      //this.getUniquePuzzle(this.state.solution);\n      var puzzle = this.deepCopy(this.state.board);\n      console.log('in onSolveHandlerNRBS bef p', puzzle);\n      this.getSolutionNRBS(puzzle); //var saved_board = this.deepCopy(puzzle);\n      //var buttonText  = \"See Solution\";\n      //var cellCheck =  Array(9).fill(false).map(() => new Array(9).fill(false));\n\n      console.log('in onSolveHandlerNRBS af p', puzzle); // this.setState({solution: solution, puzzle: puzzle, board: board, saved_board: saved_board, buttonText: buttonText, cellCheck: cellCheck}, function () {\n      //   console.log('in onPlayAgainHandler fter b',this.state.board);\n      //   console.log('in onPlayAgainHandler fter s',this.state.solution);\n      //   console.log('in onPlayAgainHandler fter p',this.state.puzzle);\n      //   console.log('in onPlayAgainHandler fter sb',this.state.saved_board);\n      // });\n    }\n  }, {\n    key: \"getSolutionNRBS\",\n    value: function getSolutionNRBS(puzzle) {\n      var nrows = 9;\n      var ncols = 9;\n      var squares = new Array(nrows);\n\n      for (var i = 0; i < nrows; i++) {\n        squares[i] = new Array(ncols);\n      }\n\n      for (var i = 0; i < nrows; i++) {\n        for (var j = 0; j < nrows; j++) {\n          squares[i][j] = {\n            value: puzzle[i][j].value,\n            pencilMark: [],\n            visited: []\n          };\n        }\n      } // console.log(\"sq\",squares)\n      //\n      // var iarr=[];\n\n\n      var numbers = []; // var cnt = 0;\n      // var loopcnt=0;\n      // var looparr=[];\n\n      for (var r = 0; r < nrows; r++) {\n        for (var c = 0; c < ncols; c++) {\n          if (puzzle[r][c].given == true) {\n            continue;\n          }\n\n          if (squares[r][c].visited.length == 0) {\n            numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n          }\n\n          numbers = this.checkCell(r, c, numbers, squares);\n          numbers = this.checkRow(r, c, numbers, squares);\n          numbers = this.checkCol(r, c, numbers, squares);\n\n          if (numbers.length != 0) {\n            var randIndex = Math.floor(Math.random() * (numbers.length - 1));\n            iarr.push(randIndex);\n            var val = numbers[randIndex];\n            squares[r][c].value = val;\n            numbers.splice(randIndex, 1);\n\n            for (var rn = 0; rn < numbers.length; rn++) {\n              squares[r][c].pencilMark.push(numbers[rn]);\n            }\n\n            squares[r][c].visited.push(val);\n          } else {\n            // loopcnt++;\n            // looparr.push([r,c])\n            while (r >= 0) {\n              c--;\n\n              if (c < 0) {\n                r--;\n                c = ncols - 1;\n              }\n\n              if (r < 0) {\n                break;\n              }\n\n              if (puzzle[r][c].given == true) {\n                continue;\n              }\n\n              if (squares[r][c].pencilMark.length != 0) {\n                squares[r][c].value = squares[r][c].pencilMark.pop();\n                squares[r][c].visited.push(squares[r][c].value);\n                numbers = squares[r][c].pencilMark;\n                break;\n              } else {\n                squares[r][c].value = 'X';\n                squares[r][c].visited = [];\n              }\n            }\n          }\n        }\n      } // console.log('iarr',iarr,'looparr',looparr);\n      // console.log('loopcnt',loopcnt);\n      // //this.setState({squares: squares, cellValues: cellValues});\n      // var solution = this.deepCopy(squares);\n      // this.setState({squares: squares, solution: solution}, function () {\n      //   console.log('state updated');\n      // });\n      // console.log('st',this.state.squares);\n\n\n      console.log('st', squares);\n      return squares;\n    } // getSolution(){\n    //   var nrows = 9;\n    //   var ncols = 9;\n    //   var squares =new Array(nrows);\n    //\n    //   for (var i=0;i<nrows;i++) {\n    //     squares[i]=new Array(ncols)\n    //   }\n    //\n    //   for (var i=0;i<nrows;i++) {\n    //      for (var j=0;j<nrows;j++) {\n    //        squares[i][j] = {value:undefined,pencilMark:[],visited:[]};\n    //      }\n    //   }\n    //\n    //   const cellValues = this.state.cellValues.slice();\n    //   const rowOneSeed = [...Array(9).keys()].map(x => ++x);\n    //   this.shuffleArray(rowOneSeed);\n    //   for(let i=0; i<rowOneSeed.length; i++){\n    //       squares[0][i].value = rowOneSeed[i];\n    //   }\n    //\n    //   this.setState({squares: squares});\n    //\n    //\n    //   var iarr=[];\n    //   var numbers = [];\n    //   var cnt = 0;\n    //   var loopcnt=0;\n    //   var looparr=[];\n    //\n    //   for(let r=1; r<nrows; r++){\n    //     for(let c=0; c<ncols; c++){\n    //         if(squares[r][c].visited.length == 0){\n    //           numbers = [1,2,3,4,5,6,7,8,9];\n    //         }\n    //\n    //         numbers = this.checkCell(r,c,numbers,squares);\n    //         numbers = this.checkRow(r,c,numbers,squares);\n    //         numbers = this.checkCol(r,c,numbers,squares);\n    //\n    //         if(numbers.length!=0){\n    //             var randIndex = Math.floor(Math.random() * (numbers.length-1));\n    //\n    //             iarr.push(randIndex);\n    //             var val = numbers[randIndex];\n    //             squares[r][c].value = val;\n    //             numbers.splice(randIndex,1);\n    //\n    //             for(let rn=0; rn<numbers.length; rn++){\n    //               squares[r][c].pencilMark.push(numbers[rn]);\n    //             }\n    //\n    //             squares[r][c].visited.push(val);\n    //         } else {\n    //           loopcnt++;\n    //           looparr.push([r,c])\n    //           while(r!=0){\n    //             c--;\n    //             if(c<0){r--;c=ncols-1}\n    //             if(r<=0){break;}\n    //\n    //             if(squares[r][c].pencilMark.length!=0){\n    //               squares[r][c].value = squares[r][c].pencilMark.pop();\n    //               squares[r][c].visited.push(squares[r][c].value);\n    //               numbers = squares[r][c].pencilMark;\n    //               break;\n    //             } else {\n    //               squares[r][c].value = 'X';\n    //               squares[r][c].visited = [];\n    //             }\n    //           }\n    //         }\n    //\n    //     }\n    //   }\n    //   console.log('iarr',iarr,'looparr',looparr);\n    //   console.log('loopcnt',loopcnt);\n    //   //this.setState({squares: squares, cellValues: cellValues});\n    //   // var solution = this.deepCopy(squares);\n    //   // this.setState({squares: squares, solution: solution}, function () {\n    //   //   console.log('state updated');\n    //   // });\n    //   console.log('st',this.state.squares);\n    //   return squares;\n    // }\n    //getUniquePuzzle(solution){\n    //   getUniquePuzzle(solvedPuzzle){\n    //     var nrows        = 9;\n    //     var ncols        = 9;\n    //     var location;\n    //     //var solvedPuzzle = solution;\n    //     var puzzle       = new Array(nrows);\n    //\n    //     console.log('sol',solvedPuzzle);\n    //\n    //     for (var i=0;i<nrows;i++) {\n    //       puzzle[i]=new Array(ncols)\n    //     }\n    //\n    //     for (var i=0;i<nrows;i++) {\n    //        for (var j=0;j<nrows;j++) {\n    //          puzzle[i][j] = {value:solvedPuzzle[i][j].value,given:true};\n    //        }\n    //     }\n    //\n    //     console.log('puzzle',puzzle);\n    //\n    //     var locationArray = [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],\n    //                          [1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],\n    //                          [2,0],[2,1],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],\n    //                          [3,0],[3,1],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[3,8],\n    //                          [4,0],[4,1],[4,2],[4,3],[4,4],[4,5],[4,6],[4,7],[4,8],\n    //                          [5,0],[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[5,8],\n    //                          [6,0],[6,1],[6,2],[6,3],[6,4],[6,5],[6,6],[6,7],[6,8],\n    //                          [7,0],[7,1],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[7,8],\n    //                          [8,0],[8,1],[8,2],[8,3],[8,4],[8,5],[8,6],[8,7],[8,8]];\n    //\n    //     this.shuffleArray(locationArray);\n    //     //console.log(locationArray);\n    //     location = locationArray.pop();\n    //     //console.log('la',locationArray);\n    //     //console.log('l',location);\n    // var cntr=0;\n    //     while(locationArray.length != 0){\n    //       cntr++;\n    //       puzzle[location[0]][location[1]].value = undefined;\n    //       puzzle[location[0]][location[1]].given = false;\n    //       //break;\n    //       if(this.uniqueSolve(puzzle)==false){\n    //         console.log(\"in here\");\n    //         puzzle[location[0]][location[1]].value = solvedPuzzle[location[0]][location[1]].value;\n    //         puzzle[location[0]][location[1]].given = true;\n    //       }\n    //       //break;\n    //       if(cntr==54){break;}\n    //       location = locationArray.pop();\n    //    }\n    //\n    //    return puzzle;\n    //   }\n    // uniqueSolve(puzzle){\n    //   var solutions =[];\n    //   this.solveSudoku(0,0,0,solutions,puzzle);\n    //   var numSolutions = solutions.length;\n    //   //console.log('numSolutions',numSolutions);\n    //   //console.log('Solutions',solutions);\n    //   if(numSolutions==0 || numSolutions>1){return false;}\n    //   else {return true;}\n    // }\n    //   solveSudoku(row, col, cnt, solutions, board){\n    //     //if(cnt>1){return true;}\n    // //console.log(\"in solvesudoku\");\n    //\n    // //console.log(\"in solvesudokuboard\",board);\n    //     if(row>=9){\n    //       cnt=cnt+1;;\n    //       solutions.push(board);\n    //       return true;\n    //     }\n    // //console.log(\"in solvesudoku\");\n    //\n    //     while(board[row][col].given == true){\n    //       col = col+1;\n    //       row = (col<=8)?row:row+1;\n    //       col = (col<=8)?col:0;\n    //       if(row==9){cnt=cnt+1;\n    //       solutions.push(board);\n    //       return true;}\n    //       //console.log('r,c',row,col);\n    //     }\n    //\n    //     var pencilMarks = this.validPencilMarks(row,col,board);\n    //\n    //     var c = col+1;\n    //     var r = (c<=8)?row:row+1;\n    //     c = (c<=8)?c  :0;\n    //\n    // // console.log('r c in b',row,col);\n    // //     console.log('b rc',board[row][col]);\n    // //console.log('b pm',pencilMarks);\n    //     for(let i=0; i<pencilMarks.length; i++){\n    //       board[row][col].value = pencilMarks[i];\n    //       board[row][col].given = true;\n    //       this.solveSudoku(r,c,cnt,solutions,board);\n    //       board[row][col].value = undefined;\n    //       board[row][col].given = false;\n    //     }\n    //\n    //     return false;\n    //   }\n\n  }, {\n    key: \"solveSudokuO\",\n    value: function solveSudokuO(row, col, board) {\n      if (row >= 9) {\n        return true;\n      }\n\n      while (board[row][col].given == true) {\n        col = col + 1;\n        row = col <= 8 ? row : row + 1;\n        col = col <= 8 ? col : 0;\n\n        if (row == 9) {\n          return true;\n        }\n      }\n\n      var pencilMarks = this.validPencilMarks(row, col, board);\n      var c = col + 1;\n      var r = c <= 8 ? row : row + 1;\n      c = c <= 8 ? c : 0;\n\n      for (var i = 0; i < pencilMarks.length; i++) {\n        board[row][col].value = pencilMarks[i];\n        board[row][col].given = true;\n\n        if (this.solveSudokuO(r, c, board)) {\n          return true;\n        }\n\n        board[row][col].value = undefined;\n        board[row][col].given = false;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"validPencilMarks\",\n    value: function validPencilMarks(row, col, board) {\n      var pM = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n      pM = this.checkCell(row, col, pM, board);\n      pM = this.checkRow(row, col, pM, board);\n      pM = this.checkCol(row, col, pM, board);\n      return pM;\n    }\n  }, {\n    key: \"deepCopy\",\n    value: function deepCopy(obj) {\n      var _this2 = this;\n\n      var rv;\n\n      switch (typeof obj) {\n        case \"object\":\n          if (obj === null) {\n            // null => null\n            rv = null;\n          } else {\n            switch (toString.call(obj)) {\n              case \"[object Array]\":\n                // It's an array, create a new array with\n                // deep copies of the entries\n                rv = obj.map(function (o) {\n                  return _this2.deepCopy(o);\n                });\n                break;\n\n              default:\n                rv = Object.keys(obj).reduce(function (prev, key) {\n                  prev[key] = _this2.deepCopy(obj[key]);\n                  return prev;\n                }, {});\n                break;\n            }\n          }\n\n          break;\n\n        default:\n          // It's a primitive, copy via assignment\n          rv = obj;\n          break;\n      }\n\n      return rv;\n    }\n  }, {\n    key: \"getStartIndex\",\n    value: function getStartIndex(index) {\n      switch (index) {\n        case 0:\n        case 1:\n        case 2:\n          return 0;\n\n        case 3:\n        case 4:\n        case 5:\n          return 3;\n\n        case 6:\n        case 7:\n        case 8:\n          return 6;\n\n        default:\n          return 0;\n      }\n    }\n  }, {\n    key: \"onSeeSolutionsHandler\",\n    value: function onSeeSolutionsHandler() {\n      console.log('in onSeeSolutionsHandler before');\n      var buttonText = this.state.buttonText;\n      var cellCheck = Array(9).fill(false).map(function () {\n        return new Array(9).fill(false);\n      });\n      var saved_board;\n      var board;\n\n      if (buttonText == \"See Solution\") {\n        buttonText = \"Back To Puzzle\";\n        saved_board = this.deepCopy(this.state.board);\n        board = this.deepCopy(this.state.solution);\n      } else {\n        buttonText = \"See Solution\";\n        board = this.deepCopy(this.state.saved_board);\n      }\n\n      console.log('in onSeeSolutionsHandler before b', board);\n      this.setState({\n        board: board,\n        saved_board: saved_board,\n        buttonText: buttonText,\n        cellCheck: cellCheck\n      }, function () {\n        console.log('in onSeeSolutionsHandler fter b', this.state.board);\n        console.log('in onSeeSolutionsHandler fter sb', this.state.saved_board);\n      });\n    }\n  }, {\n    key: \"onResetHandler\",\n    value: function onResetHandler() {\n      var board = this.deepCopy(this.state.puzzle);\n      this.setState({\n        board: board\n      }, function () {//console.log('in onResetHandler fter b',this.state.board);\n      });\n    }\n  }, {\n    key: \"displayCellForm\",\n    value: function displayCellForm(i, j) {\n      var _this3 = this;\n\n      return React.createElement(SquareF, {\n        readOnlyVal: this.state.puzzle[i][j] ? this.state.puzzle[i][j].given : false,\n        styleSettings: ((this.state.puzzle[i][j] ? this.state.puzzle[i][j].given : false) ? {\n          fontWeight: 'bold'\n        } : {\n          fontWeight: 'normal'\n        }, this.state.cellCheck[i][j] ? {\n          color: \"red\"\n        } : {\n          color: \"black\"\n        }),\n        keyValue: this.state.board[i][j] ? this.state.board[i][j].value + '[' + i + ']' + '[' + j + ']' : undefined,\n        defaultValue: this.state.board[i][j] ? this.state.board[i][j].value : \"\",\n        onChange: function onChange(event) {\n          return _this3.valChangeHandler(i, j, event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 614\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"displayPlayAgainCell\",\n    value: function displayPlayAgainCell() {\n      var _this4 = this;\n\n      return React.createElement(SquareB, {\n        style: {\n          backgroundColor: \"blue\",\n          color: \"white\",\n          height: \"40px\",\n          width: \"100px\"\n        },\n        className: \"square\",\n        onClick: function onClick() {\n          return _this4.onPlayAgainHandler();\n        },\n        value: \"Play Again\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"displayResetCell\",\n    value: function displayResetCell() {\n      var _this5 = this;\n\n      return React.createElement(SquareB, {\n        style: {\n          backgroundColor: \"blue\",\n          color: \"white\",\n          height: \"40px\",\n          width: \"100px\"\n        },\n        className: \"square\",\n        onClick: function onClick() {\n          return _this5.onResetHandler();\n        },\n        value: \"Reset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"displayClearCell\",\n    value: function displayClearCell() {\n      var _this6 = this;\n\n      return React.createElement(SquareB, {\n        style: {\n          backgroundColor: \"blue\",\n          color: \"white\",\n          height: \"40px\",\n          width: \"100px\"\n        },\n        className: \"square\",\n        onClick: function onClick() {\n          var board = Array(9).fill().map(function () {\n            return new Array(9).fill({\n              value: undefined,\n              given: false\n            });\n          });\n          var puzzle = Array(9).fill().map(function () {\n            return new Array(9).fill({\n              value: undefined,\n              given: false\n            });\n          });\n\n          _this6.setState({\n            board: board,\n            puzzle: puzzle\n          });\n        },\n        value: \"Clear\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 649\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"displaySeeSolutionsCell\",\n    value: function displaySeeSolutionsCell() {\n      var _this7 = this;\n\n      return React.createElement(SquareB, {\n        style: {\n          backgroundColor: \"blue\",\n          color: \"white\",\n          height: \"40px\",\n          width: \"100px\"\n        },\n        className: \"square\",\n        onClick: function onClick() {\n          return _this7.onSeeSolutionsHandler();\n        },\n        value: this.state.buttonText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 662\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"displaySolveCell\",\n    value: function displaySolveCell() {\n      var _this8 = this;\n\n      return React.createElement(SquareB, {\n        style: {\n          backgroundColor: \"blue\",\n          color: \"white\",\n          height: \"40px\",\n          width: \"100px\"\n        },\n        className: \"square\",\n        onClick: function onClick() {\n          return _this8.onSolveHandler();\n        },\n        value: \"Solve Using Recursive Backtracking Solver\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"displaySolveCellLS\",\n    value: function displaySolveCellLS() {\n      var _this9 = this;\n\n      return React.createElement(SquareB, {\n        style: {\n          backgroundColor: \"blue\",\n          color: \"white\",\n          height: \"40px\",\n          width: \"100px\"\n        },\n        className: \"square\",\n        onClick: function onClick() {\n          return _this9.onSolveHandlerNRBS();\n        },\n        value: \"Solve Using Strategy Based Logical Solver\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"displaySolveCellNRBS\",\n    value: function displaySolveCellNRBS() {\n      var _this10 = this;\n\n      return React.createElement(SquareB, {\n        style: {\n          backgroundColor: \"blue\",\n          color: \"white\",\n          height: \"40px\",\n          width: \"100px\"\n        },\n        className: \"square\",\n        onClick: function onClick() {\n          return _this10.onSolveHandlerNRBS();\n        },\n        value: \"Solve Using Non-Recursive Backtracking Solver\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 714\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 715\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 716\n        },\n        __self: this\n      }, this.displayCellForm(0, 0), this.displayCellForm(0, 1), this.displayCellForm(0, 2), this.displayCellForm(0, 3), this.displayCellForm(0, 4), this.displayCellForm(0, 5), this.displayCellForm(0, 6), this.displayCellForm(0, 7), this.displayCellForm(0, 8)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727\n        },\n        __self: this\n      }, this.displayCellForm(1, 0), this.displayCellForm(1, 1), this.displayCellForm(1, 2), this.displayCellForm(1, 3), this.displayCellForm(1, 4), this.displayCellForm(1, 5), this.displayCellForm(1, 6), this.displayCellForm(1, 7), this.displayCellForm(1, 8)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 738\n        },\n        __self: this\n      }, this.displayCellForm(2, 0), this.displayCellForm(2, 1), this.displayCellForm(2, 2), this.displayCellForm(2, 3), this.displayCellForm(2, 4), this.displayCellForm(2, 5), this.displayCellForm(2, 6), this.displayCellForm(2, 7), this.displayCellForm(2, 8)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 749\n        },\n        __self: this\n      }, this.displayCellForm(3, 0), this.displayCellForm(3, 1), this.displayCellForm(3, 2), this.displayCellForm(3, 3), this.displayCellForm(3, 4), this.displayCellForm(3, 5), this.displayCellForm(3, 6), this.displayCellForm(3, 7), this.displayCellForm(3, 8)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 760\n        },\n        __self: this\n      }, this.displayCellForm(4, 0), this.displayCellForm(4, 1), this.displayCellForm(4, 2), this.displayCellForm(4, 3), this.displayCellForm(4, 4), this.displayCellForm(4, 5), this.displayCellForm(4, 6), this.displayCellForm(4, 7), this.displayCellForm(4, 8)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 771\n        },\n        __self: this\n      }, this.displayCellForm(5, 0), this.displayCellForm(5, 1), this.displayCellForm(5, 2), this.displayCellForm(5, 3), this.displayCellForm(5, 4), this.displayCellForm(5, 5), this.displayCellForm(5, 6), this.displayCellForm(5, 7), this.displayCellForm(5, 8)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 782\n        },\n        __self: this\n      }, this.displayCellForm(6, 0), this.displayCellForm(6, 1), this.displayCellForm(6, 2), this.displayCellForm(6, 3), this.displayCellForm(6, 4), this.displayCellForm(6, 5), this.displayCellForm(6, 6), this.displayCellForm(6, 7), this.displayCellForm(6, 8)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 793\n        },\n        __self: this\n      }, this.displayCellForm(7, 0), this.displayCellForm(7, 1), this.displayCellForm(7, 2), this.displayCellForm(7, 3), this.displayCellForm(7, 4), this.displayCellForm(7, 5), this.displayCellForm(7, 6), this.displayCellForm(7, 7), this.displayCellForm(7, 8)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 804\n        },\n        __self: this\n      }, this.displayCellForm(8, 0), this.displayCellForm(8, 1), this.displayCellForm(8, 2), this.displayCellForm(8, 3), this.displayCellForm(8, 4), this.displayCellForm(8, 5), this.displayCellForm(8, 6), this.displayCellForm(8, 7), this.displayCellForm(8, 8)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 815\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 816\n        },\n        __self: this\n      }, this.displaySolveCell()), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 819\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 820\n        },\n        __self: this\n      }, this.displaySolveCellNRBS()), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 823\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 824\n        },\n        __self: this\n      }, this.displaySolveCellLS()), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 827\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 828\n        },\n        __self: this\n      }, this.displayPlayAgainCell()), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 831\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 832\n        },\n        __self: this\n      }, this.displaySeeSolutionsCell()), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 837\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 838\n        },\n        __self: this\n      }, this.displayResetCell()), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 841\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 842\n        },\n        __self: this\n      }, this.displayClearCell()));\n    }\n  }]);\n\n  return Board;\n}(React.Component);\n\nvar SudokuPuzzleSolver =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(SudokuPuzzleSolver, _React$Component2);\n\n  function SudokuPuzzleSolver() {\n    _classCallCheck(this, SudokuPuzzleSolver);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SudokuPuzzleSolver).apply(this, arguments));\n  }\n\n  _createClass(SudokuPuzzleSolver, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 853\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 854\n        },\n        __self: this\n      }, \" Sudoku \"), React.createElement(Board, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 855\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SudokuPuzzleSolver;\n}(React.Component);\n\nexport default SudokuPuzzleSolver;","map":{"version":3,"sources":["/Users/sp/Desktop/sw/react/tickingclock/game_center/src/SudokuPuzzleSolver.js"],"names":["React","Component","Square","props","backgroundColor","color","height","width","onClick","value","SquareB","style","SquareF","readOnlyVal","styleSettings","keyValue","defaultValue","onChange","Board","checkCell","r","c","numbers","squares","rowStart","getStartIndex","colStart","row","col","undefined","indexOf","splice","checkRow","i","checkCol","valChangeHandler","j","event","board","deepCopy","state","target","Number","given","console","log","setState","puzzle","cellValues","Array","fill","map","pencilMark","visited","solution","saved_board","cellCheck","buttonText","getSolution","getUniquePuzzle","solveSudokuO","getSolutionNRBS","nrows","ncols","length","randIndex","Math","floor","random","iarr","push","val","rn","pop","pencilMarks","validPencilMarks","pM","obj","rv","toString","call","o","Object","keys","reduce","prev","key","index","fontWeight","onPlayAgainHandler","onResetHandler","onSeeSolutionsHandler","onSolveHandler","onSolveHandlerNRBS","array","temp","displayCellForm","displaySolveCell","displaySolveCellNRBS","displaySolveCellLS","displayPlayAgainCell","displaySeeSolutionsCell","displayResetCell","displayClearCell","SudokuPuzzleSolver"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,WAAP;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,SACE;AACE,IAAA,KAAK,EAAE;AAACC,MAAAA,eAAe,EAAC,MAAjB;AAAyBC,MAAAA,KAAK,EAAC,OAA/B;AAAwCC,MAAAA,MAAM,EAAC,MAA/C;AAAuDC,MAAAA,KAAK,EAAC;AAA7D,KADT;AAEE,IAAA,SAAS,EAAC,QAFZ;AAGE,IAAA,OAAO,EAAEJ,KAAK,CAACK,OAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIEL,KAAK,CAACM,KAJR,CADF;AAQD;;AAED,SAASC,OAAT,CAAiBP,KAAjB,EAAwB;AACpB,SACE;AACE,IAAA,KAAK,EAAEA,KAAK,CAACQ,KADf;AAEE,IAAA,SAAS,EAAC,QAFZ;AAGE,IAAA,OAAO,EAAER,KAAK,CAACK,OAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGL,KAAK,CAACM,KALT,CADF;AASD;;AAED,SAASG,OAAT,CAAiBT,KAAjB,EAAwB;AACpB,SACI;AAAO,IAAA,IAAI,EAAC,GAAZ;AAAgB,IAAA,SAAS,EAAC,GAA1B;AAA8B,IAAA,QAAQ,EAAEA,KAAK,CAACU,WAA9C;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,EAFd;AAGE,IAAA,KAAK,EAAEV,KAAK,CAACW,aAHf;AAIE,IAAA,GAAG,EAAEX,KAAK,CAACY,QAJb;AAKE,IAAA,YAAY,EAAEZ,KAAK,CAACa,YALtB;AAME,IAAA,QAAQ,EAAEb,KAAK,CAACc,QANlB;AAOE,IAAA,OAAO,EAAEd,KAAK,CAACK,OAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAYH;;IAEGU,K;;;;;AACJ,iBAAYf,KAAZ,EAAmB;AAAA;;AAAA;;AACf,+EAAMA,KAAN;;AADe,UA8cnBgB,SA9cmB,GA8cP,UAACC,CAAD,EAAGC,CAAH,EAAKC,OAAL,EAAaC,OAAb,EAAyB;AAEnC,UAAIC,QAAQ,GAAG,MAAKC,aAAL,CAAmBL,CAAnB,CAAf;;AACA,UAAIM,QAAQ,GAAG,MAAKD,aAAL,CAAmBJ,CAAnB,CAAf;;AAEA,WAAI,IAAIM,GAAG,GAACH,QAAZ,EAAsBG,GAAG,IAAEH,QAAQ,GAAC,CAApC,EAAuCG,GAAG,EAA1C,EAA6C;AAC3C,aAAI,IAAIC,GAAG,GAACF,QAAZ,EAAsBE,GAAG,IAAEF,QAAQ,GAAC,CAApC,EAAuCE,GAAG,EAA1C,EAA6C;AAC3C,cAAG,EAAED,GAAG,IAAIP,CAAP,IAAYQ,GAAG,IAAIP,CAArB,CAAH,EAA2B;AACzB,gBAAGE,OAAO,CAACI,GAAD,CAAP,CAAaC,GAAb,EAAkBnB,KAAlB,IAA2BoB,SAA9B,EAAwC;AACtC,kBAAGP,OAAO,CAACQ,OAAR,CAAgBP,OAAO,CAACI,GAAD,CAAP,CAAaC,GAAb,EAAkBnB,KAAlC,KAA0C,CAAC,CAA9C,EAAgD;AAC/Ca,gBAAAA,OAAO,CAACS,MAAR,CAAeT,OAAO,CAACQ,OAAR,CAAgBP,OAAO,CAACI,GAAD,CAAP,CAAaC,GAAb,EAAkBnB,KAAlC,CAAf,EAAwD,CAAxD;AACA;AACF;AACF;AACF;AACF;;AACD,aAAOa,OAAP;AACD,KA/dkB;;AAAA,UAienBU,QAjemB,GAieR,UAACZ,CAAD,EAAGC,CAAH,EAAKC,OAAL,EAAaC,OAAb,EAAyB;AAClC,WAAI,IAAIU,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkBA,CAAC,EAAnB,EAAsB;AACpB,YAAGA,CAAC,IAAIZ,CAAR,EAAU;AACR,cAAGE,OAAO,CAACH,CAAD,CAAP,CAAWa,CAAX,EAAcxB,KAAd,IAAuBoB,SAA1B,EAAoC;AAClC,gBAAGP,OAAO,CAACQ,OAAR,CAAgBP,OAAO,CAACH,CAAD,CAAP,CAAWa,CAAX,EAAcxB,KAA9B,KAAsC,CAAC,CAA1C,EAA4C;AAC3Ca,cAAAA,OAAO,CAACS,MAAR,CAAeT,OAAO,CAACQ,OAAR,CAAgBP,OAAO,CAACH,CAAD,CAAP,CAAWa,CAAX,EAAcxB,KAA9B,CAAf,EAAoD,CAApD;AACA;AACF;AACF;AACF;;AACC,aAAOa,OAAP;AACH,KA5ekB;;AAAA,UA8enBY,QA9emB,GA8eR,UAACd,CAAD,EAAGC,CAAH,EAAKC,OAAL,EAAaC,OAAb,EAAyB;AAClC,WAAI,IAAIU,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkBA,CAAC,EAAnB,EAAsB;AACpB,YAAGA,CAAC,IAAIb,CAAR,EAAU;AACR,cAAGG,OAAO,CAACU,CAAD,CAAP,CAAWZ,CAAX,EAAcZ,KAAd,IAAuBoB,SAA1B,EAAoC;AAClC,gBAAGP,OAAO,CAACQ,OAAR,CAAgBP,OAAO,CAACU,CAAD,CAAP,CAAWZ,CAAX,EAAcZ,KAA9B,KAAsC,CAAC,CAA1C,EAA4C;AAC3Ca,cAAAA,OAAO,CAACS,MAAR,CAAeT,OAAO,CAACQ,OAAR,CAAgBP,OAAO,CAACU,CAAD,CAAP,CAAWZ,CAAX,EAAcZ,KAA9B,CAAf,EAAoD,CAApD;AACA;AACF;AACF;AACF;;AACD,aAAOa,OAAP;AACD,KAzfkB;;AAAA,UAuhBnBa,gBAvhBmB,GAuhBA,UAACF,CAAD,EAAGG,CAAH,EAAKC,KAAL,EAAe;AAChC,UAAMC,KAAK,GAAI,MAAKC,QAAL,CAAc,MAAKC,KAAL,CAAWF,KAAzB,CAAf;;AAEA,UAAGD,KAAK,CAACI,MAAN,CAAahC,KAAhB,EAAsB;AAClB6B,QAAAA,KAAK,CAACL,CAAD,CAAL,CAASG,CAAT,EAAY3B,KAAZ,GAAoBiC,MAAM,CAACL,KAAK,CAACI,MAAN,CAAahC,KAAd,CAA1B;AACA6B,QAAAA,KAAK,CAACL,CAAD,CAAL,CAASG,CAAT,EAAYO,KAAZ,GAAoB,IAApB;AAEAC,QAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACL,CAAD,CAAL,CAASG,CAAT,EAAY3B,KAAxB,EAA8BwB,CAA9B,EAAgCG,CAAhC;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACL,CAAD,CAAL,CAASG,CAAT,EAAYO,KAAxB,EAA8BV,CAA9B,EAAgCG,CAAhC,EALkB,CAMlB;;AACA,cAAKU,QAAL,CAAc;AAACR,UAAAA,KAAK,EAAEA;AAAR,SAAd,EAA8B,YAAY;AACxCM,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuB,KAAKL,KAAL,CAAWF,KAAlC;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwB,KAAKL,KAAL,CAAWO,MAAnC;AACD,SAHD;AAIH,OAXD,MAWO;AACLT,QAAAA,KAAK,CAACL,CAAD,CAAL,CAASG,CAAT,EAAY3B,KAAZ,GAAoBoB,SAApB;AACAS,QAAAA,KAAK,CAACL,CAAD,CAAL,CAASG,CAAT,EAAYO,KAAZ,GAAoB,KAApB,CAFK,CAEqB;;AAC1B,cAAKG,QAAL,CAAc;AAACR,UAAAA,KAAK,EAAEA;AAAR,SAAd,EAA8B,YAAY;AACxCM,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuB,KAAKL,KAAL,CAAWF,KAAlC;AACAM,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwB,KAAKL,KAAL,CAAWO,MAAnC;AACD,SAHD;;AAIAH,QAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACL,CAAD,CAAL,CAASG,CAAT,EAAY3B,KAAxB,EAA8BwB,CAA9B,EAAgCG,CAAhC;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACL,CAAD,CAAL,CAASG,CAAT,EAAYO,KAAxB,EAA8BV,CAA9B,EAAgCG,CAAhC;AACD;AACF,KA/iBkB;;AAEf,UAAKI,KAAL,GAAa;AACbQ,MAAAA,UAAU,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,KAAd,EAAqBC,GAArB,CAAyB;AAAA,eAAM,IAAIF,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB,KAAlB,CAAN;AAAA,OAAzB,CADC;AAEb3B,MAAAA,OAAO,EAAE0B,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,GAAgBC,GAAhB,CAAoB;AAAA,eAAM,IAAIF,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB;AAACzC,UAAAA,KAAK,EAACoB,SAAP;AAAiBuB,UAAAA,UAAU,EAAC,EAA5B;AAA+BC,UAAAA,OAAO,EAAC;AAAvC,SAAlB,CAAN;AAAA,OAApB,CAFI;AAGbC,MAAAA,QAAQ,EAAEL,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,GAAgBC,GAAhB,CAAoB;AAAA,eAAM,IAAIF,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB;AAACzC,UAAAA,KAAK,EAACoB,SAAP;AAAiBuB,UAAAA,UAAU,EAAC,EAA5B;AAA+BC,UAAAA,OAAO,EAAC;AAAvC,SAAlB,CAAN;AAAA,OAApB,CAHG;AAIbN,MAAAA,MAAM,EAAEE,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,GAAgBC,GAAhB,CAAoB;AAAA,eAAM,IAAIF,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB;AAACzC,UAAAA,KAAK,EAACoB,SAAP;AAAiBc,UAAAA,KAAK,EAAC;AAAvB,SAAlB,CAAN;AAAA,OAApB,CAJK;AAKbL,MAAAA,KAAK,EAAEW,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,GAAgBC,GAAhB,CAAoB;AAAA,eAAM,IAAIF,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB;AAACzC,UAAAA,KAAK,EAACoB,SAAP;AAAiBc,UAAAA,KAAK,EAAC;AAAvB,SAAlB,CAAN;AAAA,OAApB,CALM;AAMbY,MAAAA,WAAW,EAACN,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,GAAgBC,GAAhB,CAAoB;AAAA,eAAM,IAAIF,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB;AAACzC,UAAAA,KAAK,EAACoB,SAAP;AAAiBc,UAAAA,KAAK,EAAC;AAAvB,SAAlB,CAAN;AAAA,OAApB,CANC;AAOba,MAAAA,SAAS,EAAEP,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,KAAd,EAAqBC,GAArB,CAAyB;AAAA,eAAM,IAAIF,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB,KAAlB,CAAN;AAAA,OAAzB,CAPE;AAQbO,MAAAA,UAAU,EAAC,cARE,CASb;AACA;;AAVa,KAAb;AAFe;AAelB;;;;yCAGoB;AAGnB,UAAIH,QAAQ,GAAG,KAAKI,WAAL,EAAf;AACA,UAAIX,MAAM,GAAG,KAAKY,eAAL,CAAqBL,QAArB,CAAb,CAJmB,CAMnB;AACA;;AAEA,UAAIhB,KAAK,GAAG,KAAKC,QAAL,CAAcQ,MAAd,CAAZ;AACA,UAAIQ,WAAW,GAAG,KAAKhB,QAAL,CAAcQ,MAAd,CAAlB;AACA,UAAIU,UAAU,GAAI,cAAlB;AACA,UAAID,SAAS,GAAIP,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,KAAd,EAAqBC,GAArB,CAAyB;AAAA,eAAM,IAAIF,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB,KAAlB,CAAN;AAAA,OAAzB,CAAjB,CAZmB,CAanB;;AAEA,WAAKJ,QAAL,CAAc;AAACQ,QAAAA,QAAQ,EAAEA,QAAX;AAAqBP,QAAAA,MAAM,EAAEA,MAA7B;AAAqCT,QAAAA,KAAK,EAAEA,KAA5C;AAAmDiB,QAAAA,WAAW,EAAEA,WAAhE;AAA6EE,QAAAA,UAAU,EAAEA,UAAzF;AAAqGD,QAAAA,SAAS,EAAEA;AAAhH,OAAd,EAA0I,YAAY;AACpJZ,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA2C,KAAKL,KAAL,CAAWF,KAAtD;AACAM,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA2C,KAAKL,KAAL,CAAWc,QAAtD;AACAV,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA2C,KAAKL,KAAL,CAAWO,MAAtD;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA4C,KAAKL,KAAL,CAAWe,WAAvD;AACD,OALD;AAMD;;;wCAEmB;AAElB;AACA;AAEA;AACA;AAEA,UAAIR,MAAM,GAAG,KAAKR,QAAL,CAAc,KAAKC,KAAL,CAAWF,KAAzB,CAAb;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAsCE,MAAtC;AACA,WAAKa,YAAL,CAAkB,CAAlB,EAAoB,CAApB,EAAsBb,MAAtB,EAVkB,CAYlB;AACA;AACA;;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAqCE,MAArC,EAfkB,CAiBlB;AACA;AACA;AACA;AACA;AACA;AACD;;;yCAEoB;AAEnB;AACA;AAEA;AACA;AAEA,UAAIA,MAAM,GAAG,KAAKR,QAAL,CAAc,KAAKC,KAAL,CAAWF,KAAzB,CAAb;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA0CE,MAA1C;AACA,WAAKc,eAAL,CAAqBd,MAArB,EAVmB,CAYnB;AACA;AACA;;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAAyCE,MAAzC,EAfmB,CAiBnB;AACA;AACA;AACA;AACA;AACA;AACD;;;oCAEeA,M,EAAO;AACrB,UAAIe,KAAK,GAAG,CAAZ;AACA,UAAIC,KAAK,GAAG,CAAZ;AACA,UAAIxC,OAAO,GAAE,IAAI0B,KAAJ,CAAUa,KAAV,CAAb;;AAEA,WAAK,IAAI7B,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC6B,KAAf,EAAqB7B,CAAC,EAAtB,EAA0B;AACxBV,QAAAA,OAAO,CAACU,CAAD,CAAP,GAAW,IAAIgB,KAAJ,CAAUc,KAAV,CAAX;AACD;;AAED,WAAK,IAAI9B,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC6B,KAAf,EAAqB7B,CAAC,EAAtB,EAA0B;AACvB,aAAK,IAAIG,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC0B,KAAf,EAAqB1B,CAAC,EAAtB,EAA0B;AACxBb,UAAAA,OAAO,CAACU,CAAD,CAAP,CAAWG,CAAX,IAAgB;AAAC3B,YAAAA,KAAK,EAACsC,MAAM,CAACd,CAAD,CAAN,CAAUG,CAAV,EAAa3B,KAApB;AAA0B2C,YAAAA,UAAU,EAAC,EAArC;AAAwCC,YAAAA,OAAO,EAAC;AAAhD,WAAhB;AACD;AACH,OAboB,CAerB;AACA;AACA;;;AACA,UAAI/B,OAAO,GAAG,EAAd,CAlBqB,CAmBrB;AACA;AACA;;AAEA,WAAI,IAAIF,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC0C,KAAf,EAAsB1C,CAAC,EAAvB,EAA0B;AACxB,aAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC0C,KAAf,EAAsB1C,CAAC,EAAvB,EAA0B;AACtB,cAAG0B,MAAM,CAAC3B,CAAD,CAAN,CAAUC,CAAV,EAAasB,KAAb,IAAsB,IAAzB,EAA8B;AAC5B;AACD;;AAED,cAAGpB,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAcgC,OAAd,CAAsBW,MAAtB,IAAgC,CAAnC,EAAqC;AACnC1C,YAAAA,OAAO,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CAAV;AACD;;AAEDA,UAAAA,OAAO,GAAG,KAAKH,SAAL,CAAeC,CAAf,EAAiBC,CAAjB,EAAmBC,OAAnB,EAA2BC,OAA3B,CAAV;AACAD,UAAAA,OAAO,GAAG,KAAKU,QAAL,CAAcZ,CAAd,EAAgBC,CAAhB,EAAkBC,OAAlB,EAA0BC,OAA1B,CAAV;AACAD,UAAAA,OAAO,GAAG,KAAKY,QAAL,CAAcd,CAAd,EAAgBC,CAAhB,EAAkBC,OAAlB,EAA0BC,OAA1B,CAAV;;AAEA,cAAGD,OAAO,CAAC0C,MAAR,IAAgB,CAAnB,EAAqB;AACjB,gBAAIC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB9C,OAAO,CAAC0C,MAAR,GAAe,CAAhC,CAAX,CAAhB;AAEAK,YAAAA,IAAI,CAACC,IAAL,CAAUL,SAAV;AACA,gBAAIM,GAAG,GAAGjD,OAAO,CAAC2C,SAAD,CAAjB;AACA1C,YAAAA,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAcZ,KAAd,GAAsB8D,GAAtB;AACAjD,YAAAA,OAAO,CAACS,MAAR,CAAekC,SAAf,EAAyB,CAAzB;;AAEA,iBAAI,IAAIO,EAAE,GAAC,CAAX,EAAcA,EAAE,GAAClD,OAAO,CAAC0C,MAAzB,EAAiCQ,EAAE,EAAnC,EAAsC;AACpCjD,cAAAA,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAc+B,UAAd,CAAyBkB,IAAzB,CAA8BhD,OAAO,CAACkD,EAAD,CAArC;AACD;;AAEDjD,YAAAA,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAcgC,OAAd,CAAsBiB,IAAtB,CAA2BC,GAA3B;AACH,WAbD,MAaO;AACL;AACA;AACA,mBAAMnD,CAAC,IAAE,CAAT,EAAW;AACTC,cAAAA,CAAC;;AACD,kBAAGA,CAAC,GAAC,CAAL,EAAO;AAACD,gBAAAA,CAAC;AAAGC,gBAAAA,CAAC,GAAC0C,KAAK,GAAC,CAAR;AAAU;;AACtB,kBAAG3C,CAAC,GAAC,CAAL,EAAO;AAAC;AAAO;;AAEf,kBAAG2B,MAAM,CAAC3B,CAAD,CAAN,CAAUC,CAAV,EAAasB,KAAb,IAAsB,IAAzB,EAA8B;AAC5B;AACD;;AAED,kBAAGpB,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAc+B,UAAd,CAAyBY,MAAzB,IAAiC,CAApC,EAAsC;AACpCzC,gBAAAA,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAcZ,KAAd,GAAsBc,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAc+B,UAAd,CAAyBqB,GAAzB,EAAtB;AACAlD,gBAAAA,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAcgC,OAAd,CAAsBiB,IAAtB,CAA2B/C,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAcZ,KAAzC;AACAa,gBAAAA,OAAO,GAAGC,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAc+B,UAAxB;AACA;AACD,eALD,MAKO;AACL7B,gBAAAA,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAcZ,KAAd,GAAsB,GAAtB;AACAc,gBAAAA,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAcgC,OAAd,GAAwB,EAAxB;AACD;AACF;AACF;AAEJ;AACF,OA3EoB,CA4ErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAiBtB,OAAjB;AACA,aAAOA,OAAP;AACD,K,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;iCAEeI,G,EAAKC,G,EAAKU,K,EAAM;AAC3B,UAAGX,GAAG,IAAE,CAAR,EAAU;AAAC,eAAO,IAAP;AAAa;;AAExB,aAAMW,KAAK,CAACX,GAAD,CAAL,CAAWC,GAAX,EAAgBe,KAAhB,IAAyB,IAA/B,EAAoC;AAClCf,QAAAA,GAAG,GAAGA,GAAG,GAAC,CAAV;AACAD,QAAAA,GAAG,GAAIC,GAAG,IAAE,CAAN,GAASD,GAAT,GAAaA,GAAG,GAAC,CAAvB;AACAC,QAAAA,GAAG,GAAIA,GAAG,IAAE,CAAN,GAASA,GAAT,GAAa,CAAnB;;AACA,YAAGD,GAAG,IAAE,CAAR,EAAU;AAAC,iBAAO,IAAP;AAAa;AACzB;;AAED,UAAI+C,WAAW,GAAG,KAAKC,gBAAL,CAAsBhD,GAAtB,EAA0BC,GAA1B,EAA8BU,KAA9B,CAAlB;AAEA,UAAIjB,CAAC,GAAGO,GAAG,GAAC,CAAZ;AACA,UAAIR,CAAC,GAAIC,CAAC,IAAE,CAAJ,GAAOM,GAAP,GAAWA,GAAG,GAAC,CAAvB;AACAN,MAAAA,CAAC,GA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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction Square(props) {\n  return (\n    <button\n      style={{backgroundColor:\"grey\", color:\"white\", height:\"50px\", width:\"50px\"}}\n      className=\"square\"\n      onClick={props.onClick}\n    >{props.value}\n    </button>\n  );\n}\n\nfunction SquareB(props) {\n    return (\n      <button\n        style={props.style}\n        className=\"square\"\n        onClick={props.onClick}\n      >\n        {props.value}\n      </button>\n    );\n  }\n\n  function SquareF(props) {\n      return (\n          <input size=\"2\" maxLength=\"1\" readOnly={props.readOnlyVal}\n            type=\"text\"\n            placeholder=\"\"\n            style={props.styleSettings}\n            key={props.keyValue}\n            defaultValue={props.defaultValue}\n            onChange={props.onChange}\n            onClick={props.onClick}\n          />\n\n    );\n  }\n\nclass Board extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n      cellValues: Array(9).fill(false).map(() => new Array(9).fill(false)),\n      squares: Array(9).fill().map(() => new Array(9).fill({value:undefined,pencilMark:[],visited:[]})),\n      solution: Array(9).fill().map(() => new Array(9).fill({value:undefined,pencilMark:[],visited:[]})),\n      puzzle: Array(9).fill().map(() => new Array(9).fill({value:undefined,given:false})),\n      board: Array(9).fill().map(() => new Array(9).fill({value:undefined,given:false})),\n      saved_board:Array(9).fill().map(() => new Array(9).fill({value:undefined,given:false})),\n      cellCheck: Array(9).fill(false).map(() => new Array(9).fill(false)),\n      buttonText:\"See Solution\"\n      // };\n      // this.valChangeHandler = this.valChangeHandler.bind(this);\n\n      };\n  }\n\n\n  onPlayAgainHandler() {\n\n\n    var solution = this.getSolution();\n    var puzzle = this.getUniquePuzzle(solution);\n\n    //this.getSolution();\n    //this.getUniquePuzzle(this.state.solution);\n\n    var board = this.deepCopy(puzzle);\n    var saved_board = this.deepCopy(puzzle);\n    var buttonText  = \"See Solution\";\n    var cellCheck =  Array(9).fill(false).map(() => new Array(9).fill(false));\n    //console.log('in onPlayAgainHandler before b',board);\n\n    this.setState({solution: solution, puzzle: puzzle, board: board, saved_board: saved_board, buttonText: buttonText, cellCheck: cellCheck}, function () {\n      console.log('in onPlayAgainHandler fter b',this.state.board);\n      console.log('in onPlayAgainHandler fter s',this.state.solution);\n      console.log('in onPlayAgainHandler fter p',this.state.puzzle);\n      console.log('in onPlayAgainHandler fter sb',this.state.saved_board);\n    });\n  }\n\n  onSolveHandlerRBS() {\n\n    //var solution = this.getSolution();\n    //var puzzle = this.getUniquePuzzle(solution);\n\n    //this.getSolution();\n    //this.getUniquePuzzle(this.state.solution);\n\n    var puzzle = this.deepCopy(this.state.board);\n    console.log('in onSolveHandler bef p',puzzle);\n    this.solveSudokuO(0,0,puzzle);\n\n    //var saved_board = this.deepCopy(puzzle);\n    //var buttonText  = \"See Solution\";\n    //var cellCheck =  Array(9).fill(false).map(() => new Array(9).fill(false));\n    console.log('in onSolveHandler af p',puzzle);\n\n    // this.setState({solution: solution, puzzle: puzzle, board: board, saved_board: saved_board, buttonText: buttonText, cellCheck: cellCheck}, function () {\n    //   console.log('in onPlayAgainHandler fter b',this.state.board);\n    //   console.log('in onPlayAgainHandler fter s',this.state.solution);\n    //   console.log('in onPlayAgainHandler fter p',this.state.puzzle);\n    //   console.log('in onPlayAgainHandler fter sb',this.state.saved_board);\n    // });\n  }\n\n  onSolveHandlerNRBS() {\n\n    //var solution = this.getSolution();\n    //var puzzle = this.getUniquePuzzle(solution);\n\n    //this.getSolution();\n    //this.getUniquePuzzle(this.state.solution);\n\n    var puzzle = this.deepCopy(this.state.board);\n    console.log('in onSolveHandlerNRBS bef p',puzzle);\n    this.getSolutionNRBS(puzzle);\n\n    //var saved_board = this.deepCopy(puzzle);\n    //var buttonText  = \"See Solution\";\n    //var cellCheck =  Array(9).fill(false).map(() => new Array(9).fill(false));\n    console.log('in onSolveHandlerNRBS af p',puzzle);\n\n    // this.setState({solution: solution, puzzle: puzzle, board: board, saved_board: saved_board, buttonText: buttonText, cellCheck: cellCheck}, function () {\n    //   console.log('in onPlayAgainHandler fter b',this.state.board);\n    //   console.log('in onPlayAgainHandler fter s',this.state.solution);\n    //   console.log('in onPlayAgainHandler fter p',this.state.puzzle);\n    //   console.log('in onPlayAgainHandler fter sb',this.state.saved_board);\n    // });\n  }\n\n  getSolutionNRBS(puzzle){\n    var nrows = 9;\n    var ncols = 9;\n    var squares =new Array(nrows);\n\n    for (var i=0;i<nrows;i++) {\n      squares[i]=new Array(ncols)\n    }\n\n    for (var i=0;i<nrows;i++) {\n       for (var j=0;j<nrows;j++) {\n         squares[i][j] = {value:puzzle[i][j].value,pencilMark:[],visited:[]};\n       }\n    }\n\n    // console.log(\"sq\",squares)\n    //\n    // var iarr=[];\n    var numbers = [];\n    // var cnt = 0;\n    // var loopcnt=0;\n    // var looparr=[];\n\n    for(let r=0; r<nrows; r++){\n      for(let c=0; c<ncols; c++){\n          if(puzzle[r][c].given == true){\n            continue;\n          }\n\n          if(squares[r][c].visited.length == 0){\n            numbers = [1,2,3,4,5,6,7,8,9];\n          }\n\n          numbers = this.checkCell(r,c,numbers,squares);\n          numbers = this.checkRow(r,c,numbers,squares);\n          numbers = this.checkCol(r,c,numbers,squares);\n\n          if(numbers.length!=0){\n              var randIndex = Math.floor(Math.random() * (numbers.length-1));\n\n              iarr.push(randIndex);\n              var val = numbers[randIndex];\n              squares[r][c].value = val;\n              numbers.splice(randIndex,1);\n\n              for(let rn=0; rn<numbers.length; rn++){\n                squares[r][c].pencilMark.push(numbers[rn]);\n              }\n\n              squares[r][c].visited.push(val);\n          } else {\n            // loopcnt++;\n            // looparr.push([r,c])\n            while(r>=0){\n              c--;\n              if(c<0){r--;c=ncols-1}\n              if(r<0){break;}\n\n              if(puzzle[r][c].given == true){\n                continue;\n              }\n\n              if(squares[r][c].pencilMark.length!=0){\n                squares[r][c].value = squares[r][c].pencilMark.pop();\n                squares[r][c].visited.push(squares[r][c].value);\n                numbers = squares[r][c].pencilMark;\n                break;\n              } else {\n                squares[r][c].value = 'X';\n                squares[r][c].visited = [];\n              }\n            }\n          }\n\n      }\n    }\n    // console.log('iarr',iarr,'looparr',looparr);\n    // console.log('loopcnt',loopcnt);\n    // //this.setState({squares: squares, cellValues: cellValues});\n    // var solution = this.deepCopy(squares);\n    // this.setState({squares: squares, solution: solution}, function () {\n    //   console.log('state updated');\n    // });\n    // console.log('st',this.state.squares);\n    console.log('st',squares);\n    return squares;\n  }\n\n  // getSolution(){\n  //   var nrows = 9;\n  //   var ncols = 9;\n  //   var squares =new Array(nrows);\n  //\n  //   for (var i=0;i<nrows;i++) {\n  //     squares[i]=new Array(ncols)\n  //   }\n  //\n  //   for (var i=0;i<nrows;i++) {\n  //      for (var j=0;j<nrows;j++) {\n  //        squares[i][j] = {value:undefined,pencilMark:[],visited:[]};\n  //      }\n  //   }\n  //\n  //   const cellValues = this.state.cellValues.slice();\n  //   const rowOneSeed = [...Array(9).keys()].map(x => ++x);\n  //   this.shuffleArray(rowOneSeed);\n  //   for(let i=0; i<rowOneSeed.length; i++){\n  //       squares[0][i].value = rowOneSeed[i];\n  //   }\n  //\n  //   this.setState({squares: squares});\n  //\n  //\n  //   var iarr=[];\n  //   var numbers = [];\n  //   var cnt = 0;\n  //   var loopcnt=0;\n  //   var looparr=[];\n  //\n  //   for(let r=1; r<nrows; r++){\n  //     for(let c=0; c<ncols; c++){\n  //         if(squares[r][c].visited.length == 0){\n  //           numbers = [1,2,3,4,5,6,7,8,9];\n  //         }\n  //\n  //         numbers = this.checkCell(r,c,numbers,squares);\n  //         numbers = this.checkRow(r,c,numbers,squares);\n  //         numbers = this.checkCol(r,c,numbers,squares);\n  //\n  //         if(numbers.length!=0){\n  //             var randIndex = Math.floor(Math.random() * (numbers.length-1));\n  //\n  //             iarr.push(randIndex);\n  //             var val = numbers[randIndex];\n  //             squares[r][c].value = val;\n  //             numbers.splice(randIndex,1);\n  //\n  //             for(let rn=0; rn<numbers.length; rn++){\n  //               squares[r][c].pencilMark.push(numbers[rn]);\n  //             }\n  //\n  //             squares[r][c].visited.push(val);\n  //         } else {\n  //           loopcnt++;\n  //           looparr.push([r,c])\n  //           while(r!=0){\n  //             c--;\n  //             if(c<0){r--;c=ncols-1}\n  //             if(r<=0){break;}\n  //\n  //             if(squares[r][c].pencilMark.length!=0){\n  //               squares[r][c].value = squares[r][c].pencilMark.pop();\n  //               squares[r][c].visited.push(squares[r][c].value);\n  //               numbers = squares[r][c].pencilMark;\n  //               break;\n  //             } else {\n  //               squares[r][c].value = 'X';\n  //               squares[r][c].visited = [];\n  //             }\n  //           }\n  //         }\n  //\n  //     }\n  //   }\n  //   console.log('iarr',iarr,'looparr',looparr);\n  //   console.log('loopcnt',loopcnt);\n  //   //this.setState({squares: squares, cellValues: cellValues});\n  //   // var solution = this.deepCopy(squares);\n  //   // this.setState({squares: squares, solution: solution}, function () {\n  //   //   console.log('state updated');\n  //   // });\n  //   console.log('st',this.state.squares);\n  //   return squares;\n  // }\n\n  //getUniquePuzzle(solution){\n//   getUniquePuzzle(solvedPuzzle){\n//     var nrows        = 9;\n//     var ncols        = 9;\n//     var location;\n//     //var solvedPuzzle = solution;\n//     var puzzle       = new Array(nrows);\n//\n//     console.log('sol',solvedPuzzle);\n//\n//     for (var i=0;i<nrows;i++) {\n//       puzzle[i]=new Array(ncols)\n//     }\n//\n//     for (var i=0;i<nrows;i++) {\n//        for (var j=0;j<nrows;j++) {\n//          puzzle[i][j] = {value:solvedPuzzle[i][j].value,given:true};\n//        }\n//     }\n//\n//     console.log('puzzle',puzzle);\n//\n//     var locationArray = [[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],[0,7],[0,8],\n//                          [1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],\n//                          [2,0],[2,1],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],\n//                          [3,0],[3,1],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[3,8],\n//                          [4,0],[4,1],[4,2],[4,3],[4,4],[4,5],[4,6],[4,7],[4,8],\n//                          [5,0],[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[5,8],\n//                          [6,0],[6,1],[6,2],[6,3],[6,4],[6,5],[6,6],[6,7],[6,8],\n//                          [7,0],[7,1],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[7,8],\n//                          [8,0],[8,1],[8,2],[8,3],[8,4],[8,5],[8,6],[8,7],[8,8]];\n//\n//     this.shuffleArray(locationArray);\n//     //console.log(locationArray);\n//     location = locationArray.pop();\n//     //console.log('la',locationArray);\n//     //console.log('l',location);\n// var cntr=0;\n//     while(locationArray.length != 0){\n//       cntr++;\n//       puzzle[location[0]][location[1]].value = undefined;\n//       puzzle[location[0]][location[1]].given = false;\n//       //break;\n//       if(this.uniqueSolve(puzzle)==false){\n//         console.log(\"in here\");\n//         puzzle[location[0]][location[1]].value = solvedPuzzle[location[0]][location[1]].value;\n//         puzzle[location[0]][location[1]].given = true;\n//       }\n//       //break;\n//       if(cntr==54){break;}\n//       location = locationArray.pop();\n//    }\n//\n//    return puzzle;\n//   }\n\n  // uniqueSolve(puzzle){\n  //   var solutions =[];\n  //   this.solveSudoku(0,0,0,solutions,puzzle);\n  //   var numSolutions = solutions.length;\n  //   //console.log('numSolutions',numSolutions);\n  //   //console.log('Solutions',solutions);\n  //   if(numSolutions==0 || numSolutions>1){return false;}\n  //   else {return true;}\n  // }\n\n//   solveSudoku(row, col, cnt, solutions, board){\n//     //if(cnt>1){return true;}\n// //console.log(\"in solvesudoku\");\n//\n// //console.log(\"in solvesudokuboard\",board);\n//     if(row>=9){\n//       cnt=cnt+1;;\n//       solutions.push(board);\n//       return true;\n//     }\n// //console.log(\"in solvesudoku\");\n//\n//     while(board[row][col].given == true){\n//       col = col+1;\n//       row = (col<=8)?row:row+1;\n//       col = (col<=8)?col:0;\n//       if(row==9){cnt=cnt+1;\n//       solutions.push(board);\n//       return true;}\n//       //console.log('r,c',row,col);\n//     }\n//\n//     var pencilMarks = this.validPencilMarks(row,col,board);\n//\n//     var c = col+1;\n//     var r = (c<=8)?row:row+1;\n//     c = (c<=8)?c  :0;\n//\n// // console.log('r c in b',row,col);\n// //     console.log('b rc',board[row][col]);\n// //console.log('b pm',pencilMarks);\n//     for(let i=0; i<pencilMarks.length; i++){\n//       board[row][col].value = pencilMarks[i];\n//       board[row][col].given = true;\n//       this.solveSudoku(r,c,cnt,solutions,board);\n//       board[row][col].value = undefined;\n//       board[row][col].given = false;\n//     }\n//\n//     return false;\n//   }\n\n  solveSudokuO(row, col, board){\n    if(row>=9){return true;}\n\n    while(board[row][col].given == true){\n      col = col+1;\n      row = (col<=8)?row:row+1;\n      col = (col<=8)?col:0;\n      if(row==9){return true;}\n    }\n\n    var pencilMarks = this.validPencilMarks(row,col,board);\n\n    var c = col+1;\n    var r = (c<=8)?row:row+1;\n    c = (c<=8)?c  :0;\n\n    for(let i=0; i<pencilMarks.length; i++){\n      board[row][col].value = pencilMarks[i];\n      board[row][col].given = true;\n      if(this.solveSudokuO(r,c,board)){return true;}\n      board[row][col].value = undefined;\n      board[row][col].given = false;\n    }\n\n    return false;\n  }\n\n  validPencilMarks(row,col,board){\n    var pM = [1,2,3,4,5,6,7,8,9];\n    pM = this.checkCell(row,col,pM,board);\n    pM = this.checkRow(row,col,pM,board);\n    pM = this.checkCol(row,col,pM,board);\n    return pM;\n  }\n\n  deepCopy(obj) {\n      var rv;\n\n      switch (typeof obj) {\n          case \"object\":\n              if (obj === null) {\n                  // null => null\n                  rv = null;\n              } else {\n                  switch (toString.call(obj)) {\n                      case \"[object Array]\":\n                          // It's an array, create a new array with\n                          // deep copies of the entries\n                          rv = obj.map(o => this.deepCopy(o));\n                          break;\n                      default:\n                          rv = Object.keys(obj).reduce((prev, key) => {\n                              prev[key] = this.deepCopy(obj[key]);\n                              return prev;\n                          }, {});\n                          break;\n                  }\n              }\n              break;\n          default:\n              // It's a primitive, copy via assignment\n              rv = obj;\n              break;\n      }\n      return rv;\n  }\n\n  getStartIndex(index){\n    switch(index) {\n        case 0:\n        case 1:\n        case 2:\n            return 0;\n        case 3:\n        case 4:\n        case 5:\n            return 3;\n        case 6:\n        case 7:\n        case 8:\n            return 6;\n        default:\n            return 0;\n    }\n  }\n\n\n\n  checkCell = (r,c,numbers,squares) => {\n\n    var rowStart = this.getStartIndex(r);\n    var colStart = this.getStartIndex(c);\n\n    for(let row=rowStart; row<=rowStart+2; row++){\n      for(let col=colStart; col<=colStart+2; col++){\n        if(!(row == r && col == c)){\n          if(squares[row][col].value != undefined){\n            if(numbers.indexOf(squares[row][col].value)!=-1){\n             numbers.splice(numbers.indexOf(squares[row][col].value),1);\n            }\n          }\n        }\n      }\n    }\n    return numbers;\n  }\n\n  checkRow = (r,c,numbers,squares) => {\n    for(let i=0; i<9; i++){\n      if(i != c){\n        if(squares[r][i].value != undefined){\n          if(numbers.indexOf(squares[r][i].value)!=-1){\n           numbers.splice(numbers.indexOf(squares[r][i].value),1);\n          }\n        }\n      }\n    }\n      return numbers;\n  }\n\n  checkCol = (r,c,numbers,squares) => {\n    for(let i=0; i<9; i++){\n      if(i != r){\n        if(squares[i][c].value != undefined){\n          if(numbers.indexOf(squares[i][c].value)!=-1){\n           numbers.splice(numbers.indexOf(squares[i][c].value),1);\n          }\n        }\n      }\n    }\n    return numbers;\n  }\n\n  onSeeSolutionsHandler(){\n\n    console.log('in onSeeSolutionsHandler before');\n    var buttonText = this.state.buttonText;\n    var cellCheck =  Array(9).fill(false).map(() => new Array(9).fill(false));\n    var saved_board;\n    var board;\n\n    if(buttonText == \"See Solution\"){\n      buttonText  = \"Back To Puzzle\";\n      saved_board = this.deepCopy(this.state.board);\n      board       = this.deepCopy(this.state.solution);\n    } else {\n      buttonText  = \"See Solution\";\n      board       = this.deepCopy(this.state.saved_board);\n    }\n\n\n    console.log('in onSeeSolutionsHandler before b',board);\n\n    this.setState({board: board, saved_board: saved_board, buttonText: buttonText, cellCheck: cellCheck}, function () {\n      console.log('in onSeeSolutionsHandler fter b',this.state.board);\n      console.log('in onSeeSolutionsHandler fter sb',this.state.saved_board);\n    });\n  }\n\n\n\n  valChangeHandler = (i,j,event) => {\n    const board  = this.deepCopy(this.state.board);\n\n    if(event.target.value){\n        board[i][j].value = Number(event.target.value);\n        board[i][j].given = true;\n\n        console.log(board[i][j].value,i,j);\n        console.log(board[i][j].given,i,j);\n        //this.setState({board: board});\n        this.setState({board: board}, function () {\n          console.log('in val b',this.state.board);\n          console.log('in val pu',this.state.puzzle);\n        });\n    } else {\n      board[i][j].value = undefined;\n      board[i][j].given = false;//check logic\n      this.setState({board: board}, function () {\n        console.log('in val b',this.state.board);\n        console.log('in val pu',this.state.puzzle);\n      });\n      console.log(board[i][j].value,i,j);\n      console.log(board[i][j].given,i,j);\n    }\n  }\n\n  onResetHandler(){\n    var  board = this.deepCopy(this.state.puzzle);\n    this.setState({board: board}, function () {\n      //console.log('in onResetHandler fter b',this.state.board);\n    });\n  }\n\n  displayCellForm(i,j) {\n    return (\n      <SquareF\n        readOnlyVal={this.state.puzzle[i][j]?this.state.puzzle[i][j].given:false}\n        styleSettings={ (this.state.puzzle[i][j]?this.state.puzzle[i][j].given:false) ? {fontWeight: 'bold'} : {fontWeight: 'normal'},this.state.cellCheck[i][j]? {color:\"red\"} :{color:\"black\"}}\n        keyValue={this.state.board[i][j]?this.state.board[i][j].value+'['+i+']'+'['+j+']':undefined}\n        defaultValue={this.state.board[i][j]?this.state.board[i][j].value:\"\"}\n        onChange={(event) => this.valChangeHandler(i,j,event)}\n      />\n    );\n  }\n\n  displayPlayAgainCell() {\n    return (\n      <SquareB\n      style={{backgroundColor:\"blue\", color:\"white\", height:\"40px\", width:\"100px\"}}\n        className=\"square\"\n        onClick={() => this.onPlayAgainHandler()}\n        value=\"Play Again\"\n      />\n    );\n  }\n\n  displayResetCell() {\n    return (\n      <SquareB\n        style={{backgroundColor:\"blue\", color:\"white\", height:\"40px\", width:\"100px\"}}\n        className=\"square\"\n        onClick={() => this.onResetHandler()}\n        value=\"Reset\"\n      />\n    );\n  }\n\n\ndisplayClearCell() {\n  return (\n    <SquareB\n      style={{backgroundColor:\"blue\", color:\"white\", height:\"40px\", width:\"100px\"}}\n      className=\"square\"\n      onClick={() => {var board = Array(9).fill().map(() => new Array(9).fill({value:undefined,given:false}));\n      var puzzle=Array(9).fill().map(() => new Array(9).fill({value:undefined,given:false}));\n      this.setState({board: board,puzzle:puzzle})}}\n      value=\"Clear\"\n    />\n  );\n}\n\n  displaySeeSolutionsCell() {\n    return (\n      <SquareB\n        style={{backgroundColor:\"blue\", color:\"white\", height:\"40px\", width:\"100px\"}}\n        className=\"square\"\n        onClick={() => this.onSeeSolutionsHandler()}\n        value={this.state.buttonText}\n      />\n    );\n  }\n\n  displaySolveCell() {\n    return (\n      <SquareB\n        style={{backgroundColor:\"blue\", color:\"white\", height:\"40px\", width:\"100px\"}}\n        className=\"square\"\n        onClick={() => this.onSolveHandler()}\n        value=\"Solve Using Recursive Backtracking Solver\"\n      />\n    );\n  }\n\n  displaySolveCellLS() {\n    return (\n      <SquareB\n        style={{backgroundColor:\"blue\", color:\"white\", height:\"40px\", width:\"100px\"}}\n        className=\"square\"\n        onClick={() => this.onSolveHandlerNRBS()}\n        value=\"Solve Using Strategy Based Logical Solver\"\n      />\n    );\n  }\n\n  displaySolveCellNRBS() {\n    return (\n      <SquareB\n        style={{backgroundColor:\"blue\", color:\"white\", height:\"40px\", width:\"100px\"}}\n        className=\"square\"\n        onClick={() => this.onSolveHandlerNRBS()}\n        value=\"Solve Using Non-Recursive Backtracking Solver\"\n      />\n    );\n  }\n\n  shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\nrender() {\n  return (\n    <div>\n      <br></br>\n      <div className=\"board-row\">\n        {this.displayCellForm(0,0)}\n        {this.displayCellForm(0,1)}\n        {this.displayCellForm(0,2)}\n        {this.displayCellForm(0,3)}\n        {this.displayCellForm(0,4)}\n        {this.displayCellForm(0,5)}\n        {this.displayCellForm(0,6)}\n        {this.displayCellForm(0,7)}\n        {this.displayCellForm(0,8)}\n      </div>\n      <div className=\"board-row\">\n        {this.displayCellForm(1,0)}\n        {this.displayCellForm(1,1)}\n        {this.displayCellForm(1,2)}\n        {this.displayCellForm(1,3)}\n        {this.displayCellForm(1,4)}\n        {this.displayCellForm(1,5)}\n        {this.displayCellForm(1,6)}\n        {this.displayCellForm(1,7)}\n        {this.displayCellForm(1,8)}\n      </div>\n      <div className=\"board-row\">\n        {this.displayCellForm(2,0)}\n        {this.displayCellForm(2,1)}\n        {this.displayCellForm(2,2)}\n        {this.displayCellForm(2,3)}\n        {this.displayCellForm(2,4)}\n        {this.displayCellForm(2,5)}\n        {this.displayCellForm(2,6)}\n        {this.displayCellForm(2,7)}\n        {this.displayCellForm(2,8)}\n      </div>\n      <div className=\"board-row\">\n        {this.displayCellForm(3,0)}\n        {this.displayCellForm(3,1)}\n        {this.displayCellForm(3,2)}\n        {this.displayCellForm(3,3)}\n        {this.displayCellForm(3,4)}\n        {this.displayCellForm(3,5)}\n        {this.displayCellForm(3,6)}\n        {this.displayCellForm(3,7)}\n        {this.displayCellForm(3,8)}\n      </div>\n      <div className=\"board-row\">\n        {this.displayCellForm(4,0)}\n        {this.displayCellForm(4,1)}\n        {this.displayCellForm(4,2)}\n        {this.displayCellForm(4,3)}\n        {this.displayCellForm(4,4)}\n        {this.displayCellForm(4,5)}\n        {this.displayCellForm(4,6)}\n        {this.displayCellForm(4,7)}\n        {this.displayCellForm(4,8)}\n      </div>\n      <div className=\"board-row\">\n        {this.displayCellForm(5,0)}\n        {this.displayCellForm(5,1)}\n        {this.displayCellForm(5,2)}\n        {this.displayCellForm(5,3)}\n        {this.displayCellForm(5,4)}\n        {this.displayCellForm(5,5)}\n        {this.displayCellForm(5,6)}\n        {this.displayCellForm(5,7)}\n        {this.displayCellForm(5,8)}\n      </div>\n      <div className=\"board-row\">\n        {this.displayCellForm(6,0)}\n        {this.displayCellForm(6,1)}\n        {this.displayCellForm(6,2)}\n        {this.displayCellForm(6,3)}\n        {this.displayCellForm(6,4)}\n        {this.displayCellForm(6,5)}\n        {this.displayCellForm(6,6)}\n        {this.displayCellForm(6,7)}\n        {this.displayCellForm(6,8)}\n      </div>\n      <div className=\"board-row\">\n        {this.displayCellForm(7,0)}\n        {this.displayCellForm(7,1)}\n        {this.displayCellForm(7,2)}\n        {this.displayCellForm(7,3)}\n        {this.displayCellForm(7,4)}\n        {this.displayCellForm(7,5)}\n        {this.displayCellForm(7,6)}\n        {this.displayCellForm(7,7)}\n        {this.displayCellForm(7,8)}\n      </div>\n      <div className=\"board-row\">\n        {this.displayCellForm(8,0)}\n        {this.displayCellForm(8,1)}\n        {this.displayCellForm(8,2)}\n        {this.displayCellForm(8,3)}\n        {this.displayCellForm(8,4)}\n        {this.displayCellForm(8,5)}\n        {this.displayCellForm(8,6)}\n        {this.displayCellForm(8,7)}\n        {this.displayCellForm(8,8)}\n      </div>\n      <br></br>\n      <div className=\"board-row\">\n        {this.displaySolveCell()}\n      </div>\n      <br></br>\n      <div className=\"board-row\">\n        {this.displaySolveCellNRBS()}\n      </div>\n      <br></br>\n      <div className=\"board-row\">\n        {this.displaySolveCellLS()}\n      </div>\n      <br></br>\n      <div className=\"board-row\">\n        {this.displayPlayAgainCell()}\n      </div>\n      <br></br>\n      <div className=\"board-row\">\n        {this.displaySeeSolutionsCell()}\n      </div>\n\n\n      <br></br>\n      <div className=\"board-row\">\n        {this.displayResetCell()}\n      </div>\n      <br></br>\n      <div className=\"board-row\">\n        {this.displayClearCell()}\n      </div>\n    </div>\n  );\n}\n}\n\nclass SudokuPuzzleSolver extends React.Component {\nrender() {\n  return (\n      <div>\n      <h1> Sudoku </h1>\n        <Board />\n      </div>\n  );\n}\n}\n\nexport default SudokuPuzzleSolver;\n"]},"metadata":{},"sourceType":"module"}